---
import Layout from "../layouts/Layout.astro";
import { allFeeds } from "../data/parser";
import { fetchFeeds } from '../lib/api/fetchFeeds'
import { FeedDataType, getDates } from "../lib/utils/dates";

import dayjs from 'dayjs';
import relativeTime from 'dayjs/plugin/relativeTime';

dayjs.extend(relativeTime);

let feeds = null;
let err = null;

const res = await fetchFeeds()
const { data } = JSON.parse(res)
feeds = await allFeeds(data)

const feedsToSort = feeds.filter(f => {
    return (f.items.length !== 0 && f.title !== 'Syntackle')
}).map(feed => {
    feed.items.sort((a: Record<string, any>, b: Record<string, any>) => {
        const { publishDate: publishDateOfA } = getDates(a, FeedDataType.FEED_ITEM)
        const { publishDate: publishDateOfB } = getDates(b, FeedDataType.FEED_ITEM)
        return (new Date(publishDateOfB as string) as unknown as number) - (new Date(publishDateOfA as string) as unknown as number)
    })
    return feed
})

feedsToSort.sort((a, b) => {
    const { lastUpdated: lastUpdatedA } = getDates(a, FeedDataType.FEED)
    const { lastUpdated: lastUpdatedB } = getDates(b, FeedDataType.FEED)
    return (new Date(lastUpdatedB as string) as unknown as number) - (new Date(lastUpdatedA as string) as unknown as number);
})

feeds = [
    ...feeds.filter(f => f.title === 'Syntackle'),
    ...feedsToSort,
    ...feeds.filter(f => (f.items.length === 0))
]

---

<Layout title="rssed - a collection of developer RSS feeds - blogroll">
    <div id="feed_list" data-feed-list={
        JSON.stringify(
            feeds.map(feed => {
                const { lastUpdated } = getDates(feed, FeedDataType.FEED)
                const lastUpdatedDate = new Date(lastUpdated as string);
                return {
                    id: feed.id,
                    title: feed.title,
                    link: feed.link,
                    dataLastPublished: lastUpdatedDate,
                    dataItems: feed.items.length !== 0,
                    lastUpdatedLocaleDateString: lastUpdatedDate.toISOString(),
                    sinceLastUpdate: dayjs().to(dayjs(lastUpdatedDate))
                }
            })
        )
    }>
        {
            feeds ? feeds?.map((feed) => {
                const { lastUpdated } = getDates(feed, FeedDataType.FEED)
                return (
                    <div class="feed" data-items={`${feed.items.length !== 0}`} data-last-published={new Date(lastUpdated as string)} data-feed-id={feed.id}>
                        <h2>
                            <a href={`/feed/${feed.id}`}>{feed.title}</a>
                        </h2>
                        <p>{feed.link}</p>
                        {
                            feed.title === "Syntackle" ? <p>shameless promotion &#10085;</p> : <></>
                        }
                        <time datetime={new Date(lastUpdated as string).toISOString()}>
                            {
                                dayjs().to(dayjs(lastUpdated))
                            }
                        </time>
                    </div>
                );
            }).slice(0, 20) : (
                err ? (
                    <p>Oops. {err}</p>
                    <i>
                        <a href="https://github.com/murtuzaalisurti/rssed">Report an issue</a>
                        üêõ
                    </i>
                ) : (
                    <p>No feeds found!</p>
                    <i>
                        <a href="https://github.com/murtuzaalisurti/rssed">Report an issue</a>
                        üêõ
                    </i>
                )
            )
        }
    </div>
    <span id="intersection_target" style="visibility: hidden; display: block; width: 100%; margin: 2rem 0; padding: 0.5rem;"></span>
</Layout>

<style>
    #feed_list {
        display: flex;
        flex-direction: column;
        justify-content: center;
        gap: 2rem;
    }
    .feed {
        position: relative;
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
        padding: 1.5rem;
        border: 0.3rem solid rgba(201, 125, 96, 0.3);
        border-radius: 1rem;

    }
    .feed_banner::before {
        position: absolute;
        content: '‚Ä¢ new ‚Ä¢';
        right: 0.3rem;
        top: 0.3rem;
        width: fit-content;
        padding: 0.2rem 0.5rem;
        font-size: 0.7rem;
        border: 0.1rem solid rgba(201, 125, 96, 0.3);
        background: rgba(201, 125, 96, 0.3);
        border-radius: 0.5rem;
    }
    time {
        opacity: 0.9;
        font-style: italic;
        font-size: 0.75rem;
        padding: 1rem 0 0 0;
    }
</style>

<script>
    function setReadUnreadBanner(e: HTMLElement) {
        const ele = e as HTMLElement;
        const feedId = ele.dataset.feedId as string;
        const lastPublishedTime = new Date(`${ele.dataset.lastPublished}`).getTime();
    
        if (!localStorage.getItem(feedId)) {
    
            localStorage.setItem(feedId, JSON.stringify({
                read: true,
                timestamp: lastPublishedTime
            }));
    
            ele.classList.remove('feed_banner');
    
        } else {
    
            const prevPostLogRead = JSON.parse(localStorage.getItem(feedId) as string);
            const loggedPublishTime = Number(prevPostLogRead.timestamp);
    
            if (!((lastPublishedTime - loggedPublishTime) <= 0)) {
    
                const newPostLogUnread = {
                    ...prevPostLogRead,
                    read: false
                }
                localStorage.setItem(feedId, JSON.stringify(newPostLogUnread));
    
                ele.dataset.items === 'true' && ele.classList.add('feed_banner');
            } else {
                const read = JSON.parse(localStorage.getItem(feedId) as string).read;
                read && ele.classList.remove('feed_banner');
            }
        }
    }
    document.addEventListener('DOMContentLoaded', () => {
        document.querySelectorAll('.feed').forEach(e => {
            setReadUnreadBanner(e as HTMLElement);
        });
    });

    function populateTemplate({ id, link, title, dataItems, dataLastPublished, lastUpdatedLocaleDateString, sinceLastUpdate }: Record<string, any>, astroComponentDataAttributes: string[]) {
        return String.raw`
            <div class="feed lazy" data-items=${dataItems} data-last-published="${dataLastPublished}" data-feed-id="${id}" ${astroComponentDataAttributes[0]}>
                <h2 ${astroComponentDataAttributes[0]}>
                    <a href="/feed/${id}">${title}</a>
                </h2>
                <p ${astroComponentDataAttributes[0]}>${link}</p>
                ${
                    title === "Syntackle" ? `<p ${astroComponentDataAttributes[0]}>shameless promotion &#10085;</p>` : ""
                }
                <time ${astroComponentDataAttributes[0]} datetime="${lastUpdatedLocaleDateString}">
                    ${
                        sinceLastUpdate
                    }
                </time>
            </div>        
        `
    }

    function loadLazyFeedsIncrementally() {
        const feedListContainer = document.querySelector("#feed_list") as HTMLElement;
        const feedList = JSON.parse(feedListContainer.dataset.feedList as string);
        const currentlyDisplayedFeedsLength = feedListContainer.children.length;
        const newFeeds = feedList?.slice(currentlyDisplayedFeedsLength, currentlyDisplayedFeedsLength + 10)
    
        const astroComponentDataAttributes = Object.keys((feedListContainer.firstElementChild as HTMLElement).dataset)
            .filter(k => k.includes("astroCid"))
            .map(attr => `data-${attr.slice(0, 5).toLowerCase()}-${attr.slice(5, 8).toLowerCase()}-${attr.slice(8)}` as string);
    
        for (const feed of newFeeds) {
            const html = populateTemplate(feed, astroComponentDataAttributes);
            const node = new DOMParser().parseFromString(html, "text/html").body.innerHTML;
            feedListContainer.insertAdjacentHTML("beforeend", node);
        }
    
        document.querySelectorAll(".feed").forEach(e => {
            if (e.classList.contains("lazy")) {
                setReadUnreadBanner(e as HTMLElement);
            }
        })
    }

    const observer = new IntersectionObserver(loadLazyFeedsIncrementally, {
        threshold: 1
    });

    const target = document.querySelector("#intersection_target") as HTMLElement;
    observer.observe(target);
</script>