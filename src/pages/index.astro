---
import Layout from "../layouts/Layout.astro";
import { allFeeds } from "../data/parser";
import { fetchFeeds } from '../lib/api/fetchFeeds'

import dayjs from 'dayjs';
import relativeTime from 'dayjs/plugin/relativeTime';

dayjs.extend(relativeTime);

let feeds = null;
let err = null;

const res = await fetchFeeds()
const { data } = JSON.parse(res)
feeds = await allFeeds(data)

const feedsToSort = feeds.filter(f => {
    return (f.items.length !== 0 && f.title !== 'Syntackle')
}).map(feed => {
    feed.items.sort((a: Record<string, any>, b: Record<string, any>) => {
        return (new Date(b.pubDate) as unknown as number) - (new Date(a.pubDate) as unknown as number)
    })
    return feed
})

feedsToSort.sort((a, b) => {
    const lastUpdatedA = (a.items.length !== 0 ? a.items[0].pubDate : a.lastBuildDate) as string
    const lastUpdatedB = (b.items.length !== 0 ? b.items[0].pubDate : b.lastBuildDate) as string
    return (new Date(lastUpdatedB) as unknown as number) - (new Date(lastUpdatedA) as unknown as number);
})

feeds = [
    ...feeds.filter(f => f.title === 'Syntackle'),
    ...feedsToSort,
    ...feeds.filter(f => (f.items.length === 0))
]

---

<Layout title="rssed - a collection of developer RSS feeds - blogroll">
    <div id="feed_list">
        {
            feeds ? feeds?.map((feed) => {
                const lastUpdated = (feed.items.length !== 0 ? feed.items[0].pubDate : feed.lastBuildDate) as string;
                return (
                    <div class="feed" data-items={`${feed.items.length !== 0}`} data-last-published={new Date(lastUpdated)} data-feed-id={feed.id}>
                        <h2>
                            <a href={`/feed/${feed.id}`}>{feed.title}</a>
                        </h2>
                        <p>{feed.link}</p>
                        {
                            feed.title === "Syntackle" ? <p>shameless promotion &#10085;</p> : <></>
                        }
                        <time datetime={new Date(lastUpdated).toLocaleString('default')}>
                            {
                                dayjs().to(dayjs(lastUpdated))
                            }
                        </time>
                    </div>
                );
            }) : (
                err ? (
                    <p>Oops. {err}</p>
                    <i>
                        <a href="https://github.com/murtuzaalisurti/rssed">Report an issue</a>
                        üêõ
                    </i>
                ) : (
                    <p>No feeds found!</p>
                    <i>
                        <a href="https://github.com/murtuzaalisurti/rssed">Report an issue</a>
                        üêõ
                    </i>
                )
            )
        }
    </div>
</Layout>

<style>
    #feed_list {
        display: flex;
        flex-direction: column;
        justify-content: center;
        gap: 2rem;
    }
    .feed {
        position: relative;
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
        padding: 1.5rem;
        border: 0.3rem solid rgba(201, 125, 96, 0.3);
        border-radius: 1rem;

    }
    .feed_banner::before {
        position: absolute;
        content: '‚Ä¢ new ‚Ä¢';
        right: 0.3rem;
        top: 0.3rem;
        width: fit-content;
        padding: 0.2rem 0.5rem;
        font-size: 0.7rem;
        border: 0.1rem solid rgba(201, 125, 96, 0.3);
        background: rgba(201, 125, 96, 0.3);
        border-radius: 0.5rem;
    }
    time {
        opacity: 0.9;
        font-style: italic;
        font-size: 0.75rem;
        padding: 1rem 0 0 0;
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        document.querySelectorAll('.feed').forEach(e => {
            const ele = e as HTMLElement;
            const feedId = ele.dataset.feedId as string;
            const lastPublishedTime = new Date(`${ele.dataset.lastPublished}`).getTime();

            if (!localStorage.getItem(feedId)) {

                localStorage.setItem(feedId, JSON.stringify({
                    read: true,
                    timestamp: lastPublishedTime
                }));

                ele.classList.remove('feed_banner');

            } else {

                const prevPostLogRead = JSON.parse(localStorage.getItem(feedId) as string);
                const loggedPublishTime = Number(prevPostLogRead.timestamp);

                if (!((lastPublishedTime - loggedPublishTime) <= 0)) {

                    const newPostLogUnread = {
                        ...prevPostLogRead,
                        read: false
                    }
                    localStorage.setItem(feedId, JSON.stringify(newPostLogUnread));

                    ele.dataset.items === 'true' && ele.classList.add('feed_banner');
                } else {
                    const read = JSON.parse(localStorage.getItem(feedId) as string).read;
                    read && ele.classList.remove('feed_banner');
                }
            }
        })
    })
</script>